<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="readFileIntoByteArray(event)">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import org.springextensions.actionscript.ioc.config.impl.xml.namespacehandler.INamespaceHandler;
			
			private var inBytes:ByteArray = new ByteArray(); 
			
			protected function appStart(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var loader:Loader = new Loader()
					loader.addEventListener(Event.COMPLETE, loaded)
					
			}
			
			private function readFileIntoByteArray(eve:FlexEvent):void 
			{ 
				trace("start loaded")
				var inFile:File = File.desktopDirectory; // source folder is desktop 
				inFile = inFile.resolvePath("file.ess");  // name of file to read 
				var inStream:FileStream = new FileStream();
				
				inStream.open(inFile, FileMode.READ); 
				inStream.readBytes(inBytes); 
				trace("done")
				inStream.close();
				
				loaded2()
			} 
			protected function loaded2():void
			{
				var w:int;
				var h:int;
				var l:uint;
				var tmpArr:ByteArray = new ByteArray()
					var ni:int;
				inBytes.endian = Endian.LITTLE_ENDIAN
				trace(inBytes.readUTFBytes(13))
				trace('1',inBytes.position)
				
				trace(inBytes.readInt())
				trace('2',inBytes.position)
				trace(inBytes.readInt())
				trace('3',inBytes.position)
				trace(inBytes.readInt())
				trace('4',inBytes.position)
				trace(ni = inBytes.readShort())
				trace('5',inBytes.position)
				trace(inBytes.readUTFBytes(ni))
				trace('6',inBytes.position)
				trace(inBytes.readInt())
				trace('7',inBytes.position);
				trace(ni = inBytes.readShort())
				trace('8',inBytes.position);
				trace(inBytes.readUTFBytes(ni))
				trace('9',inBytes.position);
				trace(ni = inBytes.readShort())
				trace('10',inBytes.position);
				trace(inBytes.readUTFBytes(ni))
				trace('11',inBytes.position);
				trace(ni = inBytes.readShort())
				trace('12',inBytes.position);
				trace(inBytes.readUTFBytes(ni))
				trace('13',inBytes.position);
				trace(inBytes.readShort())
				trace('14',inBytes.position);
				trace(inBytes.readFloat())
				trace('15',inBytes.position);
				trace(inBytes.readFloat())
				trace('16',inBytes.position);
				trace(inBytes.readDouble())
				trace('17',inBytes.position);
				trace(w = inBytes.readInt())
				trace('18',inBytes.position);
				trace(h = inBytes.readInt())
				trace('19',inBytes.position);
				/* trace(inBytes.readInt())
				trace('20',inBytes.position);
				trace(inBytes.readByte())
				trace('21',inBytes.position); */
				l = 4*w*h
				var bitmapData:BitmapData;
				var bitmapBA:ByteArray = new ByteArray();
				var bitmap:Bitmap;
				//bitmapBA.endian = Endian.LITTLE_ENDIAN
				inBytes.readBytes(bitmapBA,0,l)
				
				trace('20',inBytes.position);
				trace(inBytes.readByte())
				trace('21',inBytes.position);
				
				// set the pixels of a bitmap from the loaded bitmapdata bytearray
				bitmapData = new BitmapData(w, h, true);
				bitmapData.setPixels(bitmapData.rect, bitmapBA);
				
				bitmap = new Bitmap(bitmapData);
				bi.width = w
				bi.height = h
				bi.source =  bitmap
					
			}
			
			public function encode(ba:ByteArray):String {
				var origPos:uint = ba.position;
				var result:Array = new Array();
				
				for (ba.position = 0; ba.position < ba.length - 1; )
					result.push(ba.readShort());
				
				if (ba.position != ba.length)
					result.push(ba.readByte() << 8);
				
				ba.position = origPos;
				return String.fromCharCode.apply(null, result);
			}
			
			public function decode(str:String):ByteArray {
				var result:ByteArray = new ByteArray();
				for (var i:int = 0; i < str.length; ++i) {
					result.writeShort(str.charCodeAt(i));
				}
				result.position = 0;
				return result;
			}
			
			
			
			
			
			
			
			protected function loaded():void
			{
				
				
				
				/* inBytes.writeInt(47);
				ba.writeUTF("Goodbye, cruel world!"); */
				
				var str:String = encode(inBytes);
				//inBytes = decode(str);
				
				//trace(str);
				// inBytes.position = 12 //fine save_game 0-12
				inBytes.position = 24
				trace("readShort() " + inBytes.readShort());
				inBytes.position = 0
				inBytes.position = 27
				trace("readUTFBytes - Name: " + inBytes.readUTFBytes(32));
				inBytes.position = 0
				inBytes.position = 36
				trace("readShort() " + inBytes.readShort());
				inBytes.position = 0
				inBytes.position = 39
				trace("readUTFBytes - Location:" + inBytes.readUTFBytes(32));
				inBytes.position = 0
				
				inBytes.position = 53
				trace("readUTFBytes - Data:" + inBytes.readUTFBytes(32));
				inBytes.position = 0
				inBytes.position = 63
				trace("readUTFBytes - Race:" + inBytes.readUTFBytes(32));
				trace("------------------------------------------------");			
				inBytes.position = 0
				
				inBytes.position = 63
				
				
				trace("readByte " + inBytes.readByte());
				trace("readUnsignedByte " + inBytes.readUnsignedByte());
				
				trace("readShort() " + inBytes.readShort());
				trace("readUnsignedShort " + inBytes.readUnsignedShort());
				
				trace("readFloat " + inBytes.readFloat())
				
				trace("readInt " + inBytes.readInt());
				trace("readUnsignedInt " + inBytes.readUnsignedInt())
				
				trace("readDouble " + inBytes.readDouble());
				
				trace("readUTFBytes " + inBytes.readUTFBytes(32));
				//trace("readUTF " + inBytes.readUTF())
				
				
				
				/* var str:String="";
				var ini:File = File.desktopDirectory
					ini = ini.resolvePath("provaDati.dat")
				var stream:FileStream = new FileStream();
				stream.open(ini, FileMode.WRITE); */
				//stream.writeUnsignedInt(14)
				//stream.writeBytes(inBytes, 20, 25)
				//trace(inBytes[12],inBytes[13],inBytes[14],inBytes[15])
				/* stream.writeBytes(inBytes, 14, 32)
				stream.close() */
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BitmapImage width="300" height="600" id="bi" />
</s:WindowedApplication>
